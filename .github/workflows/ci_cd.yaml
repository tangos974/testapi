name: CI/CD_Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - .github/workflows/ci_cd.yaml

jobs:
  lint-and-format:
    name: code QA and unittest
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "backend/uv.lock"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "backend/pyproject.toml"

      - name: Install the project
        run: |
          cd backend
          uv sync --all-extras --dev

      - name: Run code qa & generate badge
        run: |
          cd backend
          uv run pylint app tests --exit-zero 2>&1 | tee >(grep 'rated at' | awk '{print $7}' | cut -d'/' -f1 > pylint_grade.txt)
          SCORE=$(cat pylint_grade.txt)
          COLOR=$(../.github/get_color.sh $SCORE)
          curl "https://img.shields.io/badge/pylint_grade-$SCORE-$COLOR" -o ../.github/pylint-badge.svg

      - name: Run checkov on entire repo
        run: |
          cd backend
          uv run checkov -d .. --skip-check CKV_DOCKER_4,CKV_GCP_84,CKV_GCP_113,CKV2_GHA_1,CKV_GCP_41,CKV_GCP_49,CKV_GHA_7

      - name: Run tests with coverage & badge
        run: |
          cd backend
          uv run pytest --cov=app --cov-report=xml tests
          uv run genbadge coverage -i coverage.xml -o ../.github/coverage.svg

      - name: Push bages
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update badges"
          file_pattern: "*.svg"

  deploy-dev:
    name: Build, scan, push and deploy to dev
    runs-on: ubuntu-latest
    needs: lint-and-format

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_DEV_CREDENTIALS }}

      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_DEV_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY }}/${{ vars.APP_NAME }}:latest ./backend
        
      - name: Scan Docker image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_DEV_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY }}/${{ vars.APP_NAME }}:latest
          severity: CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN
          format: table

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_DEV_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY }}/${{ vars.APP_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ vars.APP_NAME }} \
            --image ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_DEV_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY }}/${{ vars.APP_NAME }}:latest \
            --region ${{ vars.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated
  
  push-prod:
    name: push image to prod project
    runs-on: ubuntu-latest
    needs: deploy-dev

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_PROD_CREDENTIALS }}

      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Get Short Commit SHA
        id: short_sha
        run: |
          short_sha=$(echo ${{ github.sha }} | cut -c1-7)
          echo "short_sha=$short_sha" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROD_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY }}/${{ vars.APP_NAME }}:${{ steps.short_sha.outputs.short_sha }} ./backend

        
      - name: Push Docker image to Artifact Registry tagged with short commit SHA
        run: |
          docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROD_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY }}/${{ vars.APP_NAME }}:${{ steps.short_sha.outputs.short_sha }}