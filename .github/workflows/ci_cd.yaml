name: CI/CD_Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - .github/workflows/ci_cd.yaml

jobs:
  lint-and-format:
    name: code QA and unittest
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "backend/uv.lock"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "backend/pyproject.toml"

      - name: Install the project
        run: |
          cd backend
          uv sync --all-extras --dev

      - name: Run code qa & generate badge
        run: |
          cd backend
          uv run pylint app tests --exit-zero 2>&1 | tee >(grep 'rated at' | awk '{print $7}' | cut -d'/' -f1 > pylint_grade.txt)
          SCORE=$(cat pylint_grade.txt)
          COLOR=$(../.github/get_color.sh $SCORE)
          curl "https://img.shields.io/badge/pylint_grade-$SCORE-$COLOR" -o ../.github/pylint-badge.svg

      - name: Run checkov on entire repo
        run: |
          cd backend
          uv run checkov -d .. --skip-check CKV_DOCKER_4,CKV_GCP_84,CKV2_GHA_1

      - name: Run tests with coverage & badge
        run: |
          cd backend
          uv run pytest --cov=app --cov-report=xml tests
          uv run genbadge coverage -i coverage.xml -o ../.github/coverage.svg

      - name: Push bages
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update badges"
          file_pattern: "*.svg"

  build-and-scan:
    name: Build, scan and deploy
    runs-on: ubuntu-latest
    needs: lint-and-format

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker $GCP_REGION-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_ARTIFACT_REGISTRY/$APP_NAME:latest .
        
      - name: Scan Docker image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_ARTIFACT_REGISTRY/$APP_NAME:latest
          severity: CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN
          format: table

      - name: Push Docker image to Artifact Registry
        run: |
          docker push $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_ARTIFACT_REGISTRY/$APP_NAME:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $APP_NAME \
            --image $GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$GCP_ARTIFACT_REGISTRY/$APP_NAME:latest \
            --region $GCP_REGION \
            --platform managed \
            --allow-unauthenticated